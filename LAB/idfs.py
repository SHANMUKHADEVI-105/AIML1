# -*- coding: utf-8 -*-
"""IDFS.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1SZ67IOrp0e0Aq3TwDCF_jM8-4Jzo48aa
"""

class Node:
    def __init__(self, state, parent=None):
        self.state = state
        self.parent = parent

def depth_limited_search(node, goal, depth):
    if node.state == goal:                                     #ITERATIVE DEEPENING SEARCH
        return node
    if depth <= 0:
        return None

    for child_state in get_children(node.state):  # Replace with actual logic to get children
        child_node = Node(child_state, node)
        result = depth_limited_search(child_node, goal, depth - 1)
        if result is not None:
            return result
    return None

def iterative_deepening_search(start_state, goal):
    depth = 0
    while True:
        root = Node(start_state)
        result = depth_limited_search(root, goal, depth)
        if result is not None:
            return result
        depth += 1

# Example usage
def get_children(state):
    # Replace this with actual logic to generate child nodes
    # Here, we're assuming a simple increment and decrement scenario
    return [state + 1, state - 1]

start_state = 0
goal = 5
result = iterative_deepening_search(start_state, goal)

# Output the path if the goal is found
if result:
    path = []
    while result:
        path.append(result.state)
        result = result.parent
    print("Path to goal:", path[::-1])
else:
    print("Goal not found")